/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC2771Context",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC2771Context__factory>;
    getContractFactory(
      name: "ERC1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155__factory>;
    getContractFactory(
      name: "ERC1155Supply",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155Supply__factory>;
    getContractFactory(
      name: "IERC1155MetadataURI",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155MetadataURI__factory>;
    getContractFactory(
      name: "IERC1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155__factory>;
    getContractFactory(
      name: "IERC1155Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Receiver__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "Administration",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Administration__factory>;
    getContractFactory(
      name: "HenkakuToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HenkakuToken__factory>;
    getContractFactory(
      name: "InteractHenakuToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InteractHenakuToken__factory>;
    getContractFactory(
      name: "IHenkakuToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IHenkakuToken__factory>;
    getContractFactory(
      name: "MintManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MintManager__factory>;
    getContractFactory(
      name: "Ticket",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ticket__factory>;
    getContractFactory(
      name: "Administration",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Administration__factory>;
    getContractFactory(
      name: "Forwarder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Forwarder__factory>;
    getContractFactory(
      name: "MintManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MintManager__factory>;
    getContractFactory(
      name: "PublicTicket",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PublicTicket__factory>;

    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC2771Context",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC2771Context>;
    getContractAt(
      name: "ERC1155",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155>;
    getContractAt(
      name: "ERC1155Supply",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155Supply>;
    getContractAt(
      name: "IERC1155MetadataURI",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155MetadataURI>;
    getContractAt(
      name: "IERC1155",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155>;
    getContractAt(
      name: "IERC1155Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Receiver>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "Administration",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Administration>;
    getContractAt(
      name: "HenkakuToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.HenkakuToken>;
    getContractAt(
      name: "InteractHenakuToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.InteractHenakuToken>;
    getContractAt(
      name: "IHenkakuToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IHenkakuToken>;
    getContractAt(
      name: "MintManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MintManager>;
    getContractAt(
      name: "Ticket",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ticket>;
    getContractAt(
      name: "Administration",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Administration>;
    getContractAt(
      name: "Forwarder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Forwarder>;
    getContractAt(
      name: "MintManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MintManager>;
    getContractAt(
      name: "PublicTicket",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PublicTicket>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
