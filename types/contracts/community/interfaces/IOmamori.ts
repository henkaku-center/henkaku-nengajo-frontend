/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IOmamori {
  export type NengajoInfoStruct = {
    id: BigNumberish;
    uri: string;
    creator: AddressLike;
    maxSupply: BigNumberish;
  };

  export type NengajoInfoStructOutput = [
    id: bigint,
    uri: string,
    creator: string,
    maxSupply: bigint
  ] & { id: bigint; uri: string; creator: string; maxSupply: bigint };
}

export interface IOmamoriInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "balanceOf"
      | "balanceOfBatch"
      | "isApprovedForAll"
      | "mint"
      | "mintBatch"
      | "otakiage"
      | "registerNengajo"
      | "retrieveAllNengajoes"
      | "retrieveMintedNengajoes"
      | "retrieveRegisteredNengajo"
      | "retrieveRegisteredNengajoes"
      | "safeBatchTransferFrom"
      | "safeTransferFrom"
      | "setApprovalForAll"
      | "setNft"
      | "supportsInterface"
      | "tokenURI"
      | "uri"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ApprovalForAll"
      | "Mint"
      | "MintBatch"
      | "RegisterNengajo"
      | "TransferBatch"
      | "TransferSingle"
      | "URI"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "mint", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "mintBatch",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "otakiage", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerNengajo",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "retrieveAllNengajoes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "retrieveMintedNengajoes",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "retrieveRegisteredNengajo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "retrieveRegisteredNengajoes",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish[],
      BigNumberish[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setNft", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "uri", values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintBatch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "otakiage", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerNengajo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retrieveAllNengajoes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retrieveMintedNengajoes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retrieveRegisteredNengajo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retrieveRegisteredNengajoes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setNft", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    account: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    account: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    account: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintEvent {
  export type InputTuple = [minter: AddressLike, tokenId: BigNumberish];
  export type OutputTuple = [minter: string, tokenId: bigint];
  export interface OutputObject {
    minter: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintBatchEvent {
  export type InputTuple = [minter: AddressLike, tokenIds: BigNumberish[]];
  export type OutputTuple = [minter: string, tokenIds: bigint[]];
  export interface OutputObject {
    minter: string;
    tokenIds: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RegisterNengajoEvent {
  export type InputTuple = [
    creator: AddressLike,
    tokenId: BigNumberish,
    metaDataURL: string,
    maxSupply: BigNumberish
  ];
  export type OutputTuple = [
    creator: string,
    tokenId: bigint,
    metaDataURL: string,
    maxSupply: bigint
  ];
  export interface OutputObject {
    creator: string;
    tokenId: bigint;
    metaDataURL: string;
    maxSupply: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferBatchEvent {
  export type InputTuple = [
    operator: AddressLike,
    from: AddressLike,
    to: AddressLike,
    ids: BigNumberish[],
    values: BigNumberish[]
  ];
  export type OutputTuple = [
    operator: string,
    from: string,
    to: string,
    ids: bigint[],
    values: bigint[]
  ];
  export interface OutputObject {
    operator: string;
    from: string;
    to: string;
    ids: bigint[];
    values: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferSingleEvent {
  export type InputTuple = [
    operator: AddressLike,
    from: AddressLike,
    to: AddressLike,
    id: BigNumberish,
    value: BigNumberish
  ];
  export type OutputTuple = [
    operator: string,
    from: string,
    to: string,
    id: bigint,
    value: bigint
  ];
  export interface OutputObject {
    operator: string;
    from: string;
    to: string;
    id: bigint;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace URIEvent {
  export type InputTuple = [value: string, id: BigNumberish];
  export type OutputTuple = [value: string, id: bigint];
  export interface OutputObject {
    value: string;
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IOmamori extends BaseContract {
  connect(runner?: ContractRunner | null): IOmamori;
  waitForDeployment(): Promise<this>;

  interface: IOmamoriInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  balanceOf: TypedContractMethod<
    [account: AddressLike, id: BigNumberish],
    [bigint],
    "view"
  >;

  balanceOfBatch: TypedContractMethod<
    [accounts: AddressLike[], ids: BigNumberish[]],
    [bigint[]],
    "view"
  >;

  isApprovedForAll: TypedContractMethod<
    [account: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  mint: TypedContractMethod<[_tokenId: BigNumberish], [void], "nonpayable">;

  mintBatch: TypedContractMethod<
    [_tokenIdsList: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  otakiage: TypedContractMethod<[], [void], "nonpayable">;

  registerNengajo: TypedContractMethod<
    [_maxSupply: BigNumberish, _metaDataURL: string],
    [void],
    "nonpayable"
  >;

  retrieveAllNengajoes: TypedContractMethod<
    [],
    [IOmamori.NengajoInfoStructOutput[]],
    "view"
  >;

  retrieveMintedNengajoes: TypedContractMethod<
    [_address: AddressLike],
    [IOmamori.NengajoInfoStructOutput[]],
    "view"
  >;

  retrieveRegisteredNengajo: TypedContractMethod<
    [_tokenId: BigNumberish],
    [IOmamori.NengajoInfoStructOutput],
    "view"
  >;

  retrieveRegisteredNengajoes: TypedContractMethod<
    [_address: AddressLike],
    [IOmamori.NengajoInfoStructOutput[]],
    "view"
  >;

  safeBatchTransferFrom: TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  safeTransferFrom: TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  setNft: TypedContractMethod<[_nft: AddressLike], [void], "nonpayable">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  tokenURI: TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;

  uri: TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<
    [account: AddressLike, id: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "balanceOfBatch"
  ): TypedContractMethod<
    [accounts: AddressLike[], ids: BigNumberish[]],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [account: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<[_tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "mintBatch"
  ): TypedContractMethod<[_tokenIdsList: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "otakiage"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registerNengajo"
  ): TypedContractMethod<
    [_maxSupply: BigNumberish, _metaDataURL: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "retrieveAllNengajoes"
  ): TypedContractMethod<[], [IOmamori.NengajoInfoStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "retrieveMintedNengajoes"
  ): TypedContractMethod<
    [_address: AddressLike],
    [IOmamori.NengajoInfoStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "retrieveRegisteredNengajo"
  ): TypedContractMethod<
    [_tokenId: BigNumberish],
    [IOmamori.NengajoInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "retrieveRegisteredNengajoes"
  ): TypedContractMethod<
    [_address: AddressLike],
    [IOmamori.NengajoInfoStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "safeBatchTransferFrom"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setNft"
  ): TypedContractMethod<[_nft: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "uri"
  ): TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;

  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "Mint"
  ): TypedContractEvent<
    MintEvent.InputTuple,
    MintEvent.OutputTuple,
    MintEvent.OutputObject
  >;
  getEvent(
    key: "MintBatch"
  ): TypedContractEvent<
    MintBatchEvent.InputTuple,
    MintBatchEvent.OutputTuple,
    MintBatchEvent.OutputObject
  >;
  getEvent(
    key: "RegisterNengajo"
  ): TypedContractEvent<
    RegisterNengajoEvent.InputTuple,
    RegisterNengajoEvent.OutputTuple,
    RegisterNengajoEvent.OutputObject
  >;
  getEvent(
    key: "TransferBatch"
  ): TypedContractEvent<
    TransferBatchEvent.InputTuple,
    TransferBatchEvent.OutputTuple,
    TransferBatchEvent.OutputObject
  >;
  getEvent(
    key: "TransferSingle"
  ): TypedContractEvent<
    TransferSingleEvent.InputTuple,
    TransferSingleEvent.OutputTuple,
    TransferSingleEvent.OutputObject
  >;
  getEvent(
    key: "URI"
  ): TypedContractEvent<
    URIEvent.InputTuple,
    URIEvent.OutputTuple,
    URIEvent.OutputObject
  >;

  filters: {
    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "Mint(address,uint256)": TypedContractEvent<
      MintEvent.InputTuple,
      MintEvent.OutputTuple,
      MintEvent.OutputObject
    >;
    Mint: TypedContractEvent<
      MintEvent.InputTuple,
      MintEvent.OutputTuple,
      MintEvent.OutputObject
    >;

    "MintBatch(address,uint256[])": TypedContractEvent<
      MintBatchEvent.InputTuple,
      MintBatchEvent.OutputTuple,
      MintBatchEvent.OutputObject
    >;
    MintBatch: TypedContractEvent<
      MintBatchEvent.InputTuple,
      MintBatchEvent.OutputTuple,
      MintBatchEvent.OutputObject
    >;

    "RegisterNengajo(address,uint256,string,uint256)": TypedContractEvent<
      RegisterNengajoEvent.InputTuple,
      RegisterNengajoEvent.OutputTuple,
      RegisterNengajoEvent.OutputObject
    >;
    RegisterNengajo: TypedContractEvent<
      RegisterNengajoEvent.InputTuple,
      RegisterNengajoEvent.OutputTuple,
      RegisterNengajoEvent.OutputObject
    >;

    "TransferBatch(address,address,address,uint256[],uint256[])": TypedContractEvent<
      TransferBatchEvent.InputTuple,
      TransferBatchEvent.OutputTuple,
      TransferBatchEvent.OutputObject
    >;
    TransferBatch: TypedContractEvent<
      TransferBatchEvent.InputTuple,
      TransferBatchEvent.OutputTuple,
      TransferBatchEvent.OutputObject
    >;

    "TransferSingle(address,address,address,uint256,uint256)": TypedContractEvent<
      TransferSingleEvent.InputTuple,
      TransferSingleEvent.OutputTuple,
      TransferSingleEvent.OutputObject
    >;
    TransferSingle: TypedContractEvent<
      TransferSingleEvent.InputTuple,
      TransferSingleEvent.OutputTuple,
      TransferSingleEvent.OutputObject
    >;

    "URI(string,uint256)": TypedContractEvent<
      URIEvent.InputTuple,
      URIEvent.OutputTuple,
      URIEvent.OutputObject
    >;
    URI: TypedContractEvent<
      URIEvent.InputTuple,
      URIEvent.OutputTuple,
      URIEvent.OutputObject
    >;
  };
}
