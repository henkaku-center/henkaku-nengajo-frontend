/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface MintManagerInterface extends utils.Interface {
  functions: {
    "addAdmins(address[])": FunctionFragment;
    "checkRemainingCloseTime()": FunctionFragment;
    "checkRemainingOpenTime()": FunctionFragment;
    "close_blockTimestamp()": FunctionFragment;
    "deleteAdmin(address)": FunctionFragment;
    "isAdmin(address)": FunctionFragment;
    "mintable()": FunctionFragment;
    "open_blockTimestamp()": FunctionFragment;
    "switchMintable()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addAdmins"
      | "checkRemainingCloseTime"
      | "checkRemainingOpenTime"
      | "close_blockTimestamp"
      | "deleteAdmin"
      | "isAdmin"
      | "mintable"
      | "open_blockTimestamp"
      | "switchMintable"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addAdmins",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "checkRemainingCloseTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkRemainingOpenTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "close_blockTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deleteAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "mintable", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "open_blockTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "switchMintable",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "addAdmins", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkRemainingCloseTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkRemainingOpenTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "close_blockTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintable", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "open_blockTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "switchMintable",
    data: BytesLike
  ): Result;

  events: {};
}

export interface MintManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MintManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addAdmins(
      _newAdmins: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    checkRemainingCloseTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    checkRemainingOpenTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    close_blockTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    deleteAdmin(
      _deleteAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isAdmin(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mintable(overrides?: CallOverrides): Promise<[boolean]>;

    open_blockTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    switchMintable(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addAdmins(
    _newAdmins: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  checkRemainingCloseTime(overrides?: CallOverrides): Promise<BigNumber>;

  checkRemainingOpenTime(overrides?: CallOverrides): Promise<BigNumber>;

  close_blockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  deleteAdmin(
    _deleteAdmin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isAdmin(
    _address: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mintable(overrides?: CallOverrides): Promise<boolean>;

  open_blockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  switchMintable(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addAdmins(
      _newAdmins: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    checkRemainingCloseTime(overrides?: CallOverrides): Promise<BigNumber>;

    checkRemainingOpenTime(overrides?: CallOverrides): Promise<BigNumber>;

    close_blockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    deleteAdmin(
      _deleteAdmin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isAdmin(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mintable(overrides?: CallOverrides): Promise<boolean>;

    open_blockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    switchMintable(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addAdmins(
      _newAdmins: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    checkRemainingCloseTime(overrides?: CallOverrides): Promise<BigNumber>;

    checkRemainingOpenTime(overrides?: CallOverrides): Promise<BigNumber>;

    close_blockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    deleteAdmin(
      _deleteAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isAdmin(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintable(overrides?: CallOverrides): Promise<BigNumber>;

    open_blockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    switchMintable(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addAdmins(
      _newAdmins: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    checkRemainingCloseTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkRemainingOpenTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    close_blockTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deleteAdmin(
      _deleteAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isAdmin(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    open_blockTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    switchMintable(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
